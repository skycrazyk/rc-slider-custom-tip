import React, { Component } from 'react';
import { hot } from 'react-hot-loader/root';
import Range from './Range';

class App extends Component {
  constructor(props) {
    super(props);

    this.state = {
      space: true,
      tooltipOverlay: false,
      spade: '8',
      pushable: undefined,
      allowCross: true,
    };

    this.switch = this.switch.bind(this);
    this.toggle = this.toggle.bind(this);
  }

  switch(event) {
    this.setState({
      [event.currentTarget.name]: !this.state[event.currentTarget.name],
    });
  }

  toggle(event) {
    this.setState({
      [event.currentTarget.name]: event.currentTarget.value,
    });
  }

  render() {
    const { space, spade, tooltipOverlay, pushable, allowCross } = this.state;

    return (
      <div className="container">
        <h2>–î–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π rc-slider</h2>
        <p>
          HOC –¥–ª—è rc-slider. –í—Å–µ –ø—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ rc-slider –∫–∞–∫ –µ—Å—Ç—å –∑–∞
          –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º pushable (—Å–º.–Ω–∏–∂–µ), –∏ handle (–Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–æ
          –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å tooltipOverlay (—Å–º.–Ω–∏–∂–µ))
        </p>

        <Range
          min={800000}
          max={2000000}
          defaultValue={[800000, 2000000]}
          step={1000}
          {...(pushable === ''
            ? false
            : {
                pushable: pushable === '150000' ? 150000 : pushable,
              })}
          {...(spade && {
            spade: spade === 'auto' ? spade : Number(spade),
          })}
          {...(space && { space: 10 })}
          {...(tooltipOverlay && {
            tooltipOverlay: ({ value }) => (
              <div
                style={{
                  padding: '5px 10px',
                  background: 'lime',
                  borderRadius: 5,
                }}
              >
                {value}
              </div>
            ),
          })}
          allowCross={allowCross}
        />

        <pre style={{ marginTop: 50 }}>
          {`<Range
  step={1000}
  min={800000}
  max={2000000}
  defaultValue={[800000, 2000000]}\n\n\n  `}
          <b>
            {`spade - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ tooltip –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
          —Ç—Ä–µ–∫–∞ —É –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü –≤ px.`}
          </b>
          {'\n'}
          <label>
            <input
              type="radio"
              name="spade"
              value="auto"
              onChange={this.toggle}
              defaultChecked={this.state.spade === 'auto'}
            />
            'auto' - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          </label>
          {`\n  spade="auto"\n`}
          <label>
            <input
              type="radio"
              name="spade"
              value="8"
              onChange={this.toggle}
              defaultChecked={this.state.spade === '8'}
            />
            8px
          </label>
          {`\n  spade={8}\n\n\n`}
          <label>
            <input
              type="checkbox"
              name="space"
              onChange={this.switch}
              defaultChecked={this.state.space}
            />
            space - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º/–¥ tooltip`–∞–º–∏ –≤ px
          </label>
          {`\n  space={10}\n\n\n`}
          <label>
            <input
              type="checkbox"
              name="tooltipOverlay"
              onChange={this.switch}
              defaultChecked={this.state.tooltipOverlay}
            />
            {`tooltipOverlay - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è —Ç–µ –∂–µ props, —á—Ç–æ –∏ `}
            <a
              href="https://github.com/react-component/slider/#common-api"
              target="_blank"
            >
              handle
            </a>
            {`.
                    –î–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä ReactNode`}
          </label>
          {`\n  tooltipOverlay={({ value }) => (
    <div
      style={{
        padding: '5px 10px',
        background: 'lime',
        borderRadius: 5,
      }}
    >
      {value}
    </div>
  )}\n\n\n`}
          <b>
            {`pushable - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º/—É –±–µ–≥—É–Ω–∫–∞–º–∏.
           –ê–Ω–∞–ª–æ–≥ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ `}
            <a
              href="https://github.com/react-component/slider/#common-api"
              target="_blank"
            >
              pushable
            </a>
            {` —Å —Ç–æ–π —Ä–∞–∑–Ω–∏—Ü–µ–π, 
           —á—Ç–æ –µ–≥–æ –¥–æ–ø-–Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤ px –∏ %`}
          </b>
          {`\n`}
          <label>
            <input
              type="radio"
              name="pushable"
              value=""
              onChange={this.toggle}
              defaultChecked={pushable === ''}
            />
            –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ F5 üòÄ)
          </label>
          {`\n`}
          <label>
            <input
              type="radio"
              name="pushable"
              value="150000"
              onChange={this.toggle}
              defaultChecked={pushable === '150000'}
            />
            150000 - –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ (type: number)
          </label>
          {`\n  pushable="150000"\n`}
          <label>
            <input
              type="radio"
              name="pushable"
              value="8%"
              onChange={this.toggle}
              defaultChecked={pushable === '8%'}
            />
            '8%' - –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Å–ª–∞–π–¥–µ—Ä–∞
          </label>
          {`\n  pushable="8%"\n`}
          <label>
            <input
              type="radio"
              name="pushable"
              value="25px"
              onChange={this.toggle}
              defaultChecked={this.state.spade === '25px'}
            />
            '25px' - –≤ px
          </label>
          {`\n  pushable="25px"\n\n\n`}
          <label>
            <input
              type="checkbox"
              name="allowCross"
              onChange={this.switch}
              defaultChecked={!this.state.allowCross}
            />
            {`allowCross={false}\n`}
          </label>
          {`\n/>`}
        </pre>
      </div>
    );
  }
}

export default hot(App);
