{"version":3,"sources":["../src/RangeCustomTip.jsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component, cloneElement } from 'react';\nimport { Handle } from 'rc-slider';\n\nexport default class RangeCustomTip extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tooltipMinEl: null,\n      tooltipMaxEl: null,\n      rangeEl: null,\n      pushable: null,\n    };\n\n    this.rcSliderTipClass = 'rc-slider-tip';\n    this.customHandle = this.customHandle.bind(this);\n    this.updateTooltipPosition = this.updateTooltipPosition.bind(this);\n    this.updatePushable = this.updatePushable.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.setRangeRef = this.setRangeRef.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.updatePushable();\n    this.updateTooltipPosition();\n  }\n\n  onChange(value) {\n    const { onChange } = this.props;\n    onChange && onChange(value);\n    this.forceUpdate();\n  }\n\n  setRangeRef(node) {\n    const { rangeEl } = this.state;\n\n    if (!rangeEl) {\n      const {\n        0: { handle: handlerMin },\n        1: { handle: handlerMax },\n      } = node.handlesRefs;\n\n      const tooltipMinEl = handlerMin.querySelector(\n        `.${this.rcSliderTipClass}`\n      );\n\n      const tooltipMaxEl = handlerMax.querySelector(\n        `.${this.rcSliderTipClass}`\n      );\n\n      this.setState({\n        tooltipMinEl,\n        tooltipMaxEl,\n        rangeEl: node,\n      });\n    }\n  }\n\n  customHandle(props) {\n    const { tooltipOverlay } = this.props;\n    const { value, index } = props;\n\n    const { dragging, ...restProps } = props;\n\n    const overlay =\n      typeof tooltipOverlay === 'function' ? tooltipOverlay(props) : value;\n\n    return (\n      <Handle {...restProps} key={index}>\n        <div\n          className={`${this.rcSliderTipClass}-container`}\n          style={{ display: 'flex', justifyContent: 'center' }}\n        >\n          <div className={this.rcSliderTipClass}>{overlay}</div>\n        </div>\n      </Handle>\n    );\n  }\n\n  updatePushable() {\n    const { min, max, pushable } = this.props;\n    const { pushable: statePushable, rangeEl } = this.state;\n\n    if (!pushable && !statePushable) return;\n\n    let resolvePushable;\n\n    // Стандартное поведение\n    if (typeof pushable === 'number') {\n      resolvePushable = pushable;\n    }\n\n    // В процентах или в пикселях\n    else if (typeof pushable === 'string') {\n      const lastLetter = pushable[pushable.length - 1];\n\n      // процентах\n      if (lastLetter === '%') {\n        resolvePushable =\n          ((max - min) / 100) * Number(pushable.slice(0, pushable.length - 1));\n      }\n\n      const lastTwoLetters = pushable.slice(pushable.length - 2);\n\n      // в пикселях\n      if (lastTwoLetters === 'px' && rangeEl) {\n        const rangeBounds = rangeEl.sliderRef.getBoundingClientRect();\n        const onePixelConsist = (max - min) / rangeBounds.width;\n        const pixels = Number(pushable.slice(0, pushable.length - 2));\n        resolvePushable = pixels * onePixelConsist;\n      }\n    }\n\n    const isNeedUpdate =\n      Math.trunc(statePushable) !== Math.trunc(resolvePushable) &&\n      resolvePushable < max - min;\n\n    if (isNeedUpdate) {\n      this.setState({ pushable: resolvePushable });\n    }\n  }\n\n  updateTooltipPosition() {\n    const { space, spade } = this.props;\n    const { tooltipMinEl, tooltipMaxEl, rangeEl } = this.state;\n\n    if (rangeEl) {\n      const {\n        0: { handle: handlerMin },\n        1: { handle: handlerMax },\n      } = rangeEl.handlesRefs;\n\n      // Левый handler\n      const handlerMinBounds = handlerMin.getBoundingClientRect();\n\n      const handlerMinHalf = handlerMinBounds.width / 2;\n\n      const handleMinCenter = handlerMinBounds.left + handlerMinHalf;\n\n      // Правый handler\n      const handlerMaxBounds = handlerMax.getBoundingClientRect();\n\n      const handlerMaxHalf = handlerMaxBounds.width / 2;\n\n      const handleMaxCenter = handlerMaxBounds.left + handlerMaxHalf;\n\n      if (tooltipMinEl && tooltipMaxEl) {\n        // Левый бегунок - видимое значение\n        const tooltipMinElBounds = tooltipMinEl.getBoundingClientRect();\n\n        // Левый бегунок - потенциальное значение\n        const tooltipMinHalfWidth = tooltipMinElBounds.width / 2;\n\n        const tooltipMinHideBounds = {\n          left: handleMinCenter - tooltipMinHalfWidth,\n          right: handleMinCenter + tooltipMinHalfWidth,\n        };\n\n        // Правый бегунок - видимое значение\n        const tooltipMaxElBounds = tooltipMaxEl.getBoundingClientRect();\n\n        // Правый бегунок - потенциальное значение\n        const tooltipMaxHalfWidth = tooltipMaxElBounds.width / 2;\n\n        const tooltipMaxHideBounds = {\n          left: handleMaxCenter - tooltipMaxHalfWidth,\n          right: handleMaxCenter + tooltipMaxHalfWidth,\n        };\n\n        // Расчитываем rangeBounds\n        const sourceRangeBounds = rangeEl.sliderRef.getBoundingClientRect();\n\n        let rangeBounds;\n\n        if (typeof spade === 'number') {\n          rangeBounds = {\n            left: sourceRangeBounds.left - spade,\n            right: sourceRangeBounds.right + spade,\n          };\n        } else if (spade === 'auto') {\n          rangeBounds = {\n            left: sourceRangeBounds.left - tooltipMinHalfWidth,\n            right: sourceRangeBounds.right + tooltipMaxHalfWidth,\n          };\n        }\n\n        // Пересечение? Тут наверно нужно оптимизировать условие :)\n        const isIntersection =\n          space &&\n          (tooltipMinHideBounds.right + space >= tooltipMaxHideBounds.left ||\n            tooltipMinElBounds.right + space >= tooltipMaxElBounds.left ||\n            tooltipMinElBounds.right + space >= tooltipMaxHideBounds.left ||\n            tooltipMinHideBounds.right + space >= tooltipMaxElBounds.left);\n\n        let tooltipMinLeft = 0;\n        let tooltipMaxLeft = 0;\n\n        // Логика позиционирования без пересечении\n        if (!isIntersection) {\n          if (rangeBounds.left >= tooltipMinHideBounds.left) {\n            tooltipMinLeft = rangeBounds.left - tooltipMinHideBounds.left;\n          }\n\n          if (rangeBounds.right <= tooltipMaxHideBounds.right) {\n            tooltipMaxLeft = -(tooltipMaxHideBounds.right - rangeBounds.right);\n          }\n        }\n\n        // Логика позиционирования при пересечении\n        if (isIntersection) {\n          if (rangeBounds.left >= tooltipMinHideBounds.left) {\n            // У левого края - min\n            tooltipMinLeft = rangeBounds.left - tooltipMinHideBounds.left;\n\n            // У левого края - max\n            tooltipMaxLeft =\n              tooltipMinElBounds.right + space - tooltipMaxHideBounds.left;\n          }\n\n          // У правого края\n          else if (rangeBounds.right <= tooltipMaxHideBounds.right) {\n            // У правого края - min\n            tooltipMinLeft = -(\n              tooltipMinHideBounds.right -\n              (tooltipMaxElBounds.left - space)\n            );\n\n            // У правого края - max\n            tooltipMaxLeft = -(tooltipMaxHideBounds.right - rangeBounds.right);\n          }\n\n          // В центре\n          else {\n            const diff =\n              tooltipMinHideBounds.right + space - tooltipMaxHideBounds.left;\n\n            const half = diff / 2;\n\n            const minFixed =\n              tooltipMinHideBounds.left - half < rangeBounds.left;\n\n            const maxFixed =\n              tooltipMaxHideBounds.right + half > rangeBounds.right;\n\n            tooltipMinLeft = -half;\n            tooltipMaxLeft = half;\n\n            // Ближе к левому краю\n            if (minFixed) {\n              // позиция левого бегунка\n              tooltipMinLeft = rangeBounds.left - tooltipMinHideBounds.left;\n\n              // позиция правого бегунка\n              tooltipMaxLeft =\n                tooltipMinElBounds.right - tooltipMaxHideBounds.left + space;\n            }\n\n            // Ближе к правому краю\n            if (maxFixed) {\n              // позиция правого бегунка\n              tooltipMaxLeft =\n                half - (tooltipMaxHideBounds.right + half - rangeBounds.right);\n\n              // позиция левого бегунка\n              tooltipMinLeft =\n                tooltipMaxElBounds.left - space - tooltipMinHideBounds.right;\n            }\n          }\n        }\n\n        // Работа без space\n        if (!space) {\n          // Левый бегунок у правого края\n          if (rangeBounds.right <= tooltipMinHideBounds.right) {\n            tooltipMinLeft = -(tooltipMinHideBounds.right - rangeBounds.right);\n          }\n\n          // Правый бегунок у левого края\n          if (rangeBounds.left >= tooltipMaxHideBounds.left) {\n            tooltipMaxLeft = rangeBounds.left - tooltipMaxHideBounds.left;\n          }\n        }\n\n        // Сдвигаем левый тултип\n        tooltipMinEl.style = [\n          'position: relative',\n          `left: ${tooltipMinLeft}px`,\n        ].join(';');\n\n        // Сдвигаем правый тутлип\n        tooltipMaxEl.style = [\n          'position: relative',\n          `left: ${tooltipMaxLeft}px`,\n        ].join(';');\n      }\n    }\n  }\n\n  render() {\n    const { pushable } = this.state;\n    const { children: Range } = this.props;\n\n    return cloneElement(Range, {\n      ref: this.setRangeRef,\n      handle: this.customHandle,\n      onChange: this.onChange,\n      ...(pushable && { pushable }),\n    });\n  }\n}\n\nRangeCustomTip.defaultProps = {\n  spade: 'auto',\n};\n"]}